{"version":3,"sources":["reducers/actions.js","reducers/types.js","components/Search.js","components/List.js","App.js","serviceWorker.js","reducers/product-reducer.js","reducers/index.js","index.js"],"names":["fetchProduct","search","dispatch","type","Promise","resolve","setTimeout","payload","useStyles","makeStyles","formInput","flexGrow","paper","padding","marginTop","width","marginBottom","connect","props","useState","setSearch","classes","onSearch","Paper","className","Grid","container","alignItems","justify","TextField","label","variant","onKeyDown","e","keyCode","onChange","ev","target","value","IconButton","color","onClick","Icon","state","product","isLoading","CircularProgress","disableShrink","Slide","direction","in","products","length","mountOnEnter","unmountOnExit","List","component","map","key","ListItem","button","ListItemText","primary","Divider","root","height","background","App","Boolean","window","location","hostname","match","initialState","errMessage","productReducer","action","Object","assign","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.33965d15.chunk.js","sourcesContent":["\nimport { FETCHING_PRODUCT , SET_PRODUCT , ERROR_PRODUCT } from './types'\n\nconst setProductsAction = (products) => ({\n    type : SET_PRODUCT ,\n    payload : products\n})\n\nconst errProduct = (message) => ({\n    type : ERROR_PRODUCT ,\n    payload : message\n})\n\n\nconst fetchProduct = (search) => (dispatch) => {    \n    dispatch({ type : FETCHING_PRODUCT })\n\n    new Promise((resolve) => {\n        setTimeout( () => {\n            dispatch(setProductsAction([ 'anngur', 'jagung']))\n            resolve()\n        } , 5000)\n    })\n\n}\n\nexport default fetchProduct","export const FETCHING_PRODUCT = 'FETCHING_PRODUCT'\nexport const SET_PRODUCT = 'SET_PRODUCT'\nexport const ERROR_PRODUCT = 'ERROR_PRODUCT'","import React , { useState } from 'react'\nimport { TextField, Paper, Grid, IconButton, Icon } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport fetchProduct from '../reducers/actions'\nimport { connect } from 'react-redux'\n\nconst useStyles = makeStyles(() => ({\n    formInput: {\n        flexGrow: 1\n    },\n    paper: {\n        padding: '10px',\n        marginTop: '5px',\n        width: '500px',\n        marginBottom: '20px'\n    }\n}));\n\n\nconst Search = (props) => {\n\n    const [ search , setSearch ] = useState('')\n    const classes = useStyles()\n\n    const onSearch = () => {        \n        props.fetchProduct(search)\n    }\n\n    const onKeyPress = (e) => {\n        if (e.keyCode === 13) onSearch()\n    }\n \n    return (\n        <Paper className={classes.paper} >\n            <Grid container alignItems='center' justify='center' >\n                <TextField label=\"Search Products\" variant=\"outlined\" className={classes.formInput} onKeyDown={onKeyPress} onChange={ ev => setSearch(ev.target.value) } />\n                &nbsp;\n                <IconButton color=\"primary\" onClick={onSearch}>\n                    <Icon>search</Icon>\n                </IconButton>\n            </Grid>\n        </Paper>)\n}\n\nconst mapDispatch = (dispatch) => ({\n    fetchProduct : (search) => dispatch(fetchProduct(search))\n})\n\nexport default connect( null , mapDispatch ) (Search)","import React, { Fragment } from 'react'\nimport { Paper, List, ListItem, ListItemText, Divider, CircularProgress, Slide } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { connect } from 'react-redux'\n\nconst useStyles = makeStyles(() => ({\n    formInput: {\n        flexGrow: 1\n    },\n    paper: {\n        width: '500px'\n    }\n}));\n\n\nconst ListProduct = (props) => {\n\n    const classes = useStyles()\n\n    return (<>\n        {props.isLoading ? <CircularProgress disableShrink /> :\n            <Slide direction=\"up\" in={props.products.length > 0} mountOnEnter unmountOnExit>\n                <Paper className={classes.paper} >\n                    <List component=\"nav\" >\n                        {props.products.map((product, key) =>\n                            (<Fragment key={key}>\n                                <ListItem button  >\n                                    <ListItemText primary={product} />\n                                </ListItem>\n                                <Divider />\n                            </Fragment>))}\n                    </List>\n                </Paper>\n            </Slide>\n        }\n    </>)\n}\n\n\nexport default connect((state) => state.product)(ListProduct)\n","import React from 'react';\nimport { Grid } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Search from './components/Search'\nimport List from './components/List'\n\nconst useStyles = makeStyles(() => ({\n  root : {\n    height: '100vh',\n    background: 'linear-gradient(45deg, #c5ceff, #e6f0ffb8)'\n  }\n}));\n\nfunction App() {\n  const classes = useStyles()\n\n  return (\n    <Grid container alignItems='center' justify='center' direction='column' className={classes.root} >\n        <Search />\n        <List />\n    </Grid>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\nimport { FETCHING_PRODUCT , SET_PRODUCT , ERROR_PRODUCT } from './types'\n\nconst initialState = {\n    products : [] , //['Nasi Goreng', 'Ikan Asin', 'Es Teh', 'Prata', 'Tahu Kupat'] ,\n    isLoading : false,\n    errMessage : null\n}\n\nconst productReducer = ( state = initialState , action) => {\n    switch(action.type) {\n        case FETCHING_PRODUCT : \n            return Object.assign({}, \n                state, \n                { isLoading : true , products : [] }\n            )\n        case SET_PRODUCT : \n            return Object.assign({},\n                state,\n                { products : action.payload , isLoading : false }\n            )\n        case ERROR_PRODUCT :\n            return Object.assign({},\n                state,\n                { errMessage : action.payload }\n            )\n        default : \n            return state\n    }\n}\n\nexport default productReducer\n","import { combineReducers } from 'redux'\nimport productReducer from './product-reducer'\n\nconst rootReducer = combineReducers({\n    product : productReducer\n  })\n  \n  export default rootReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport rootReducer from './reducers';\nimport thunk from 'redux-thunk';\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}